package ck.tyut.first.sort;
/**插入排序是一种简单直观的排序算法。它的工作原理非常类似于我们抓扑克牌*/
public class InsertionSort {
	public static void main(String[] args) {
		int[] arr = { 2, 5, 1, 4, 2, 3, 5 };
		sort(arr, arr.length);
	}

	// 分类 ------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- 最坏情况为输入序列是降序排列的,此时时间复杂度O(n^2)
	// 最优时间复杂度 ---- 最好情况为输入序列是升序排列的,此时时间复杂度O(n)
	// 平均时间复杂度 ---- O(n^2)
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 稳定

	public static void sort(int A[], int n) {
		for (int i = 1; i < n; i++) // 类似抓扑克牌排序
		{
			int get = A[i]; // 右手抓到一张扑克牌
			int j = i - 1; // 拿在左手上的牌总是排序好的
			while (j >= 0 && A[j] > get) // 将抓到的牌与手牌从右向左进行比较
			{
				A[j + 1] = A[j]; // 如果该手牌比抓到的牌大，就将其右移
				j--;
			}
			A[j + 1] = get; // 直到该手牌比抓到的牌小(或二者相等)，将抓到的牌插入到该手牌右边(相等元素的相对次序未变，所以插入排序是稳定的)
		}
	}

	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- O(n^2)
	// 最优时间复杂度 ---- O(nlogn)
	// 平均时间复杂度 ---- O(n^2)
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 稳定
	/** 插入排序的改进：二分插入排序 */
	void InsertionSortDichotomy(int A[], int n) {
		for (int i = 1; i < n; i++) {
			int get = A[i]; // 右手抓到一张扑克牌
			int left = 0; // 拿在左手上的牌总是排序好的，所以可以用二分法
			int right = i - 1; // 手牌左右边界进行初始化
			while (left <= right) // 采用二分法定位新牌的位置
			{
				int mid = (left + right) / 2;
				if (A[mid] > get)
					right = mid - 1;
				else
					left = mid + 1;
			}
			for (int j = i - 1; j >= left; j--) // 将欲插入新牌位置右边的牌整体向右移动一个单位
			{
				A[j + 1] = A[j];
			}
			A[left] = get; // 将抓到的牌插入手牌
		}
	}
	// 分类 -------------- 内部比较排序
	// 数据结构 ---------- 数组
	// 最差时间复杂度 ---- 根据步长序列的不同而不同。已知最好的为O(n(logn)^2)
	// 最优时间复杂度 ---- O(n)
	// 平均时间复杂度 ---- 根据步长序列的不同而不同。
	// 所需辅助空间 ------ O(1)
	// 稳定性 ------------ 不稳定

	/**插入排序的更高效改进：希尔排序(Shell Sort)*/
	/*希尔排序，也叫递减增量排序，是插入排序的一种更高效的改进版本。希尔排序是不稳定的排序算法。

	　　希尔排序是基于插入排序的以下两点性质而提出改进方法的：

	插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率
	但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位
	　　希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。
	　　假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n^2)的排序（冒泡排序或直接插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。*/
	void ShellSort(int A[], int n) {
		int h = 0;
	    while (h <= n)                          // 生成初始增量
	    {
	        h = 3 * h + 1;
	    }
	    while (h >= 1)
	    {
	        for (int i = h; i < n; i++)
	        {
	            int j = i - h;
	            int get = A[i];
	            while (j >= 0 && A[j] > get)
	            {
	                A[j + h] = A[j];
	                j = j - h;
	            }
	            A[j + h] = get;
	        }
	        h = (h - 1) / 3;                    // 递减增量
	    }
	}
}
